Section 16.
 Question 1: What are the advantages of Polymorphism?
-	Tính đa hình (Polymorphism) là một trong những đặc điểm cơ bản của OOP, cho phép các đối tượng thuộc các lớp khác nhau có thể phản ứng khác nhau với cùng một phương thức hoặc cùng một thao tác.
-	Lợi ích bao gồm: 
o	Tái sử dụng code.
o	Đồng nhất cho tên một hành vi, một phương thức cho các lớp để thuận tiện cho việc chỉnh sửa và bảo trì code => Tăng tính linh hoạt cho code.
o	Mở rộng dễ hơn.
Question 2: How is Inheritance useful to achieve Polymorphism in Java?
-	Tính kế thừa (Inheritance) là một tính năng trong lập trình hướng đối tượng cho phép một lớp (lớp con) kế thừa các thuộc tính và phương thức từ một lớp khác (lớp cha). Kế thừa giúp tái sử dụng mã, giảm sự lặp lại, và tạo ra các mối quan hệ giữa các lớp, đồng thời cũng tạo điều kiện cho việc mở rộng chức năng của các lớp con mà không cần phải thay đổi mã nguồn của lớp cha.
-	Ví dụ: Thay vì mỗi lớp Dog và Cat thêm display() thì khi kế thừa thì ta không cần làm thế mà nó đã có sẵn rồi, và giữa chúng có mối quan hệ là cùng là thuộc kiểu Animal
lớp Animal {
    String name;
    Animal(String name) {
        this.name = name;
    }
    void display() {
        System.out.println(name);
    }
}

lớp Dog extends Animal {
    Dog(String name) {
        super(name);
    }
}

lớp Cat extends Animal {
    Cat(String name) {
        super(name);
    }
}

public lớp Main {
    public static void main(String[] args) {
        Dog dog = new Dog("Dog");
        Cat cat = new Cat("Cat");
        dog.display();  // Giảm lặp lại mã, sử dụng phương thức từ lớp cha
        cat.display();
    }
}
Question 3: What are the differences between Polymorphism and Inheritance in Java?
-	Sự khác nhau giữa đa hình và kế thừa là:
o	Đa hình chỉ cho kế thừa các phương thức, còn Kế thừa cho phép lớp con có thể kế thừa cả thuộc tính lẫn phương thức.
Section 17. 
Question 1: What class should implement the Comparable interface?
-	Theo em, lớp nên dùng Comparable là lớp đại diện cho các lớp cần sắp xếp để phục vụ cho nhu cầu, mục đích mà mình muốn, ở đây là class Media
Question 2: In those classes, how should you implement the compareTo()method to reflect the ordering that we want?
-	Theo em, em triển khai như sau:
public abstract class Media implements Comparable<Media> {
    @Override
    public int compareTo(Media otherMedia) {
        // So sánh theo tiêu đề
        return this.title.compareTo(otherMedia.getTitle());
    }
}
Question 3: Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?
-	Có thể, cài đặt như sau:
public abstract class Media implements Comparable<Media> {
   	 @Override
   	 public int compareTo(Media otherMedia) {
       	 // So sánh tiêu đề trước
     	   int titleComparison = this.title.compareTo(otherMedia.getTitle());

       	 // Tiêu đề giống nhau thì so sánh giá
       	 return (titleComparison == 0) ? Float.compare(this.cost, otherMedia.getCost()) : titleComparison;
    }
}
	Ví dụ theo tiêu đề sau đó giá cả, thì nếu hai tiêu đề giống nhau thì hàm compareTo sẽ trả 0 thì lúc này ta sẽ so sánh theo giá cả.
Question 4: Suppose the DVDs have a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this?
-	Theo em nên cài đặt như sau:
public class DVD extends Media {
    // Ghi đè phương thức compareTo cho DVD
    @Override
    public int compareTo(Media otherMedia) {
        if (otherMedia instanceof DVD) {
            DVD otherDVD = (DVD) otherMedia;
            // So sánh theo tiêu đề trước
            int titleComparison = getTitle().compareTo(otherDVD.getTitle());
            // Nếu tiêu đề bằng nhau, so sánh theo chiều dài giảm dần
            if (titleComparison == 0) {
                int lengthComparison = Integer.compare(otherDVD.getLength(), getLength());
                // Nếu chiều dài cũng bằng nhau, so sánh theo giá
                return (lengthComparison == 0) ? Float.compare(getCost(), otherDVD.getCost()) : lengthComparison;
            }
            return titleComparison;
        } else {
            // Đối với các loại media không phải DVD, sử dụng phương thức so sánh mặc định (tiêu đề rồi đến giá)
            return super.compareTo(otherMedia);
        }
    }
}
